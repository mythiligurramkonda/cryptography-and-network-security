#include <stdio.h>
#include <string.h>
#define SIZE 5
void createPlayfairTable(char *keyword, char table[SIZE][SIZE]) {
    int i, j, k = 0, used[26] = {0};
    char alphabet[] = "ABCDEFGHIKLMNOPQRSTUVWXYZ";
    for (i = 0; i < strlen(keyword); i++) {
        if (keyword[i] == 'J') keyword[i] = 'I';
        if (!used[keyword[i] - 'A']) {
            table[k / SIZE][k % SIZE] = keyword[i];
            used[keyword[i] - 'A'] = 1;
            k++;
        }
    }
    for (i = 0; i < 25; i++) {
        if (!used[alphabet[i] - 'A']) {
            table[k / SIZE][k % SIZE] = alphabet[i];
            used[alphabet[i] - 'A'] = 1;
            k++;
        }
    }
}

void findPosition(char table[SIZE][SIZE], char c, int *row, int *col) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (table[i][j] == c) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}
void decryptPlayfair(char *message, char *decrypted, char table[SIZE][SIZE]) {
    int i, row1, col1, row2, col2;
    for (i = 0; i < strlen(message); i += 2) {
        findPosition(table, message[i], &row1, &col1);
        findPosition(table, message[i + 1], &row2, &col2);
        if (row1 == row2) {
            decrypted[i] = table[row1][(col1 - 1 + SIZE) % SIZE];
            decrypted[i + 1] = table[row2][(col2 - 1 + SIZE) % SIZE];
        } else if (col1 == col2) {
            decrypted[i] = table[(row1 - 1 + SIZE) % SIZE][col1];
            decrypted[i + 1] = table[(row2 - 1 + SIZE) % SIZE][col2];
        } else {
            decrypted[i] = table[row1][col2];
            decrypted[i + 1] = table[row2][col1];
        }
    }
    decrypted[i] = '\0';
}
int main() {
    char keyword[] = "PTBOAT";
    char message[] = "KXJEYUREBEZWEHEWRYTUHEYFSKREHEGOYFIWTTTUOLKSYCAJPOBOTEIZONTXBYBNTGONEYCZWRGDSONSXBOUYWRHEBAAHYUSEDQ";
    char table[SIZE][SIZE];
    char decrypted[100] = {0};
    createPlayfairTable(keyword, table);
    decryptPlayfair(message, decrypted, table);
    printf("Decrypted message: %s\n", decrypted);

    return 0;
}
