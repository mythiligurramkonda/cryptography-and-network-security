#include <stdio.h>
#define ALPHABET_SIZE 26
int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1; 
}
void optimizedDecrypt(char *ciphertext, int a, int b) {
    int a_inv = modInverse(a, ALPHABET_SIZE);
    if (a_inv == -1) {
        printf("Decryption failed: No modular inverse.\n");
        return;
    }
    for (int i = 0; ciphertext[i]; i++) {
        char ch = ciphertext[i];
        if (ch >= 'A' && ch <= 'Z') {
            printf("%c", (a_inv * (ch - 'A' - b + ALPHABET_SIZE)) % ALPHABET_SIZE + 'A');
        } else {
            putchar(ch); // Print non-alphabetic characters as is
        }
    }
    putchar('\n');
}
int main() {
    char ciphertext[] = "BUXK"; // Example ciphertext
    optimizedDecrypt(ciphertext, 5, 8); // Example parameters
    return 0;
}
